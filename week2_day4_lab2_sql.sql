-- Challenge - Joining on multiple tables
USE sakila;
-- Write SQL queries to perform the following tasks using the Sakila database:


-- 1. List the number of films per category.
SELECT 
    c.name AS category_name,
    COUNT(fc.film_id) AS number_of_films
FROM
    category c
        JOIN
    film_category fc ON c.category_id = fc.category_id
GROUP BY c.name;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT 
    s.store_id, ci.city, co.country
FROM
    store s
        JOIN
    address a ON s.address_id = a.address_id
        JOIN
    city ci ON a.city_id = ci.city_id
        JOIN
    country co ON ci.country_id = co.country_id;

-- 3.  Calculate the total revenue generated by each store in dollars.
SELECT 
    s.store_id, SUM(p.amount) AS total_revenue
FROM
    store s
        JOIN
    staff st ON st.store_id = s.store_id
        JOIN
    payment p ON p.staff_id = st.staff_id
GROUP BY s.store_id; 
-- 4.  Determine the average running time of films for each category.

SELECT 
    c.name, AVG(f.length) AS avg_runtime
FROM
    category c
        JOIN
    film_category fc ON fc.category_id = c.category_id
        JOIN
    film f ON fc.film_id = f.film_id
GROUP BY c.name; 


-- Bonus:
-- 5 Identify the film categories with the longest average running time.
SELECT 
    c.name, AVG(f.length) AS avg_runtime
FROM
    category c
        JOIN
    film_category fc ON fc.category_id = c.category_id
        JOIN
    film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY avg_runtime DESC
LIMIT 1; -- can change number if u want more categories
-- 6 Display the top 10 most frequently rented movies in descending order.
SELECT 
    f.title, COUNT(r.rental_id) AS times_rented
FROM
    film f
        JOIN
    inventory i ON f.film_id = i.film_id
        JOIN
    rental r ON r.inventory_id = i.inventory_id
GROUP BY f.title
ORDER BY times_rented DESC
LIMIT 10;
-- 7 Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT 
    f.title, s.store_id
FROM
    film f
        JOIN
    inventory i ON f.film_id = i.film_id
        JOIN
    store s ON s.store_id = i.store_id
WHERE
    f.title = 'Academy Dinosaur'
        AND s.store_id = 1;
-- 8 Provide a list of all distinct film titles, along with their availability status in the inventory.
SELECT 
    f.title,
    IFNULL(CASE
                WHEN i.film_id IS NULL THEN 'NOT available'
                ELSE 'Available'
            END,
            'NOT available') AS availability
FROM
    film f
        LEFT JOIN
    inventory i ON f.film_id = i.film_id
GROUP BY f.title , i.film_id; -- have to group by both of them so i dont get the error
-- Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that 
-- are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

-- Here are some tips to help you successfully complete the lab:

-- Tip 1: This lab involves joins with multiple tables, which can be challenging. Take your time and follow the steps 
-- we discussed in class:

-- Make sure you understand the relationships between the tables in the database. This will help you determine which 
-- tables to join and which columns to use in your joins.-- 

